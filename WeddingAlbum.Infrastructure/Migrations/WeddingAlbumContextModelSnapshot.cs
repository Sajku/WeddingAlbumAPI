// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeddingAlbum.Infrastructure.DataModel.Context;

#nullable disable

namespace WeddingAlbum.Infrastructure.Migrations
{
    [DbContext(typeof(WeddingAlbumContext))]
    partial class WeddingAlbumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeddingAlbum.Domain.Albums.Album", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<int>("EventId")
                    .HasColumnType("int");

                b.Property<bool>("IsPrivate")
                    .HasColumnType("bit");

                b.Property<int>("MainPhotoId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("EventId");

                b.HasIndex("MainPhotoId");

                b.HasIndex("UserId");

                b.ToTable("Album", (string)null);
            });

            modelBuilder.Entity("WeddingAlbum.Domain.Comments.Comment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Content")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<int>("PhotoId")
                    .HasColumnType("int");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("PhotoId");

                b.HasIndex("UserId");

                b.ToTable("Comment", (string)null);
            });

            modelBuilder.Entity("WeddingAlbum.Domain.Events.Event", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("AdminCode")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("GuestCode")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Localization")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Event", (string)null);
            });

            modelBuilder.Entity("WeddingAlbum.Domain.PhotoInAlbums.PhotoInAlbum", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<int>("AlbumId")
                    .HasColumnType("int");

                b.Property<int>("PhotoId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("AlbumId");

                b.HasIndex("PhotoId");

                b.ToTable("PhotoInAlbum", (string)null);
            });

            modelBuilder.Entity("WeddingAlbum.Domain.Photos.Photo", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("Base64")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Photo", (string)null);
            });

            modelBuilder.Entity("WeddingAlbum.Domain.Samples.Sample", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreatedOn")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UpdatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime?>("UpdatedOn")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.ToTable("Sample", (string)null);
            });

            modelBuilder.Entity("WeddingAlbum.Domain.UserFavouriteAlbums.UserFavouriteAlbum", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<int>("AlbumId")
                    .HasColumnType("int");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("AlbumId");

                b.HasIndex("UserId");

                b.ToTable("UserFavouriteAlbum", (string)null);
            });

            modelBuilder.Entity("WeddingAlbum.Domain.UserInEvents.UserInEvent", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                b.Property<int>("EventId")
                    .HasColumnType("int");

                b.Property<bool>("IsAdmin")
                    .HasColumnType("bit");

                b.Property<bool>("IsOwner")
                    .HasColumnType("bit");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("EventId");

                b.HasIndex("UserId");

                b.ToTable("UserInEvent", (string)null);
            });

            modelBuilder.Entity("WeddingAlbum.Domain.Users.User", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Hash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LastName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Salt")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("User", (string)null);
            });

            modelBuilder.Entity("WeddingAlbum.Domain.Albums.Album", b =>
            {
                b.HasOne("WeddingAlbum.Domain.Events.Event", "Event")
                    .WithMany()
                    .HasForeignKey("EventId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("WeddingAlbum.Domain.Photos.Photo", "Photo")
                    .WithMany()
                    .HasForeignKey("MainPhotoId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("WeddingAlbum.Domain.Users.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.NoAction);

                b.Navigation("Event");

                b.Navigation("Photo");

                b.Navigation("User");
            });

            modelBuilder.Entity("WeddingAlbum.Domain.Comments.Comment", b =>
            {
                b.HasOne("WeddingAlbum.Domain.Photos.Photo", "Photo")
                    .WithMany()
                    .HasForeignKey("PhotoId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("WeddingAlbum.Domain.Users.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.NoAction);

                b.Navigation("Photo");

                b.Navigation("User");
            });

            modelBuilder.Entity("WeddingAlbum.Domain.PhotoInAlbums.PhotoInAlbum", b =>
            {
                b.HasOne("WeddingAlbum.Domain.Albums.Album", "Album")
                    .WithMany()
                    .HasForeignKey("AlbumId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("WeddingAlbum.Domain.Photos.Photo", "Photo")
                    .WithMany()
                    .HasForeignKey("PhotoId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("Album");

                b.Navigation("Photo");
            });

            modelBuilder.Entity("WeddingAlbum.Domain.Photos.Photo", b =>
            {
                b.HasOne("WeddingAlbum.Domain.Users.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.NoAction);

                b.Navigation("User");
            });

            modelBuilder.Entity("WeddingAlbum.Domain.UserFavouriteAlbums.UserFavouriteAlbum", b =>
            {
                b.HasOne("WeddingAlbum.Domain.Albums.Album", "Album")
                    .WithMany()
                    .HasForeignKey("AlbumId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("WeddingAlbum.Domain.Users.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.NoAction);

                b.Navigation("Album");

                b.Navigation("User");
            });

            modelBuilder.Entity("WeddingAlbum.Domain.UserInEvents.UserInEvent", b =>
            {
                b.HasOne("WeddingAlbum.Domain.Events.Event", "Event")
                    .WithMany()
                    .HasForeignKey("EventId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("WeddingAlbum.Domain.Users.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.NoAction);

                b.Navigation("Event");

                b.Navigation("User");
            });
#pragma warning restore 612, 618
        }
    }
}